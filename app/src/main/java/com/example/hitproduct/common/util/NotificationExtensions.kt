package com.example.hitproduct.common.util

import android.app.NotificationChannel
import android.app.NotificationManager
import android.content.Context
import android.os.Build

/**
 * Central configuration for notification templates by event type.
 */
object NotificationConfig {
    /**
     * Template containing title and body for a notification.
     */
    data class Template(val title: String, val body: String)

    /**
     * Generate notification template based on event type and data payload.
     * @param type Event type (e.g. "invite", "trip", "sos", "auth" )
     * @param data Raw data map from message payload
     */
    fun getTemplate(type: String, data: Map<String, String>?): Template {

        return when (type) {
            // 1. L·ªùi m·ªùi gh√©p ƒë√¥i
            "pair_request" -> Template(
                title = "B·∫°n c√≥ l·ªùi m·ªùi gh√©p ƒë√¥i üíå",
                body  = "M·ªü ·ª©ng d·ª•ng ƒë·ªÉ xem ai v·ª´a m·ªùi b·∫°n nh√©!"
            )

            // 2. Gh√©p ƒë√¥i th√†nh c√¥ng
            "pair_success" -> Template(
                title = "Gh√©p ƒë√¥i th√†nh c√¥ng üíñ",
                body  = "Ch√∫c m·ª´ng! Hai b·∫°n gi·ªù ƒë√£ l√† m·ªôt ƒë√¥i ho√†n h·∫£o"
            )

            // 3. Ch·ªçn ng√†y b·∫Øt ƒë·∫ßu
            "start_date_selected" -> {
                val date = data?.get("startDate") ?: ""
                Template(
                    title = "Ng√†y b·∫Øt ƒë·∫ßu ƒë√£ ƒë∆∞·ª£c ch·ªçn üåÖ",
                    body  = if (date.isNotBlank())
                        "H√£y nh·ªõ: ng√†y kh·ªüi h√†nh l√† $date"
                    else
                        "M·ªü ·ª©ng d·ª•ng ƒë·ªÉ xem ng√†y kh·ªüi h√†nh"
                )
            }

            // 4. Cho pet ƒÉn
            "pet_fed" -> Template(
                title = "Pet v·ª´a ƒë∆∞·ª£c cho ƒÉn üç≤",
                body  = "M·ªü ·ª©ng d·ª•ng ƒë·ªÉ ki·ªÉm tra t√¨nh tr·∫°ng pet nh√©!"
            )

            // 5a. Th√™m ghi ch√∫
            "note_added" -> Template(
                title = "C√≥ k·ª∑ ni·ªám m·ªõi ‚ú®",
                body  = "M·ªü ·ª©ng d·ª•ng ƒë·ªÉ xem ghi ch√∫ v·ª´a th√™m"
            )
            // 5b. C·∫≠p nh·∫≠t ghi ch√∫
            "note_updated" -> Template(
                title = "Ghi ch√∫ v·ª´a ƒë∆∞·ª£c ch·ªânh s·ª≠a ‚úçÔ∏è",
                body  = "M·ªü ·ª©ng d·ª•ng ƒë·ªÉ xem n·ªôi dung c·∫≠p nh·∫≠t"
            )
            // 5c. Xo√° ghi ch√∫
            "note_deleted" -> Template(
                title = "Ghi ch√∫ ƒë√£ b·ªã xo√° üíî",
                body  = "Ghi ch√∫ ƒë√≥ ƒë√£ b·ªã xo√° nh∆∞ng k·ª∑ ni·ªám v·∫´n c√≤n"
            )

            // 6. Tin nh·∫Øn m·ªõi
            "chat_message" -> Template(
                title = "B·∫°n c√≥ tin nh·∫Øn m·ªõi üí¨",
                body  = "M·ªü ·ª©ng d·ª•ng ƒë·ªÉ ƒë·ªçc tin nh·∫Øn"
            )

            // M·∫∑c ƒë·ªãnh
            else -> Template(
                title = "Th√¥ng b√°o m·ªõi üçØ",
                body  = "M·ªü ·ª©ng d·ª•ng ƒë·ªÉ xem chi ti·∫øt"
            )
        }    }
}

// Extensions for NotificationManager and creating a default channel

/**
 * Extension property to get NotificationManager from Context
 */
val Context.notificationManager: NotificationManager
    get() = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager

/**
 * Create a default notification channel for general notifications.
 * Call this once in Application.onCreate().
 */
fun Context.createNotificationChannel() {
    val defaultChannel = NotificationChannel(
        "default_channel",               // ID channel
        "Th√¥ng b√°o chung",               // T√™n hi·ªÉn th·ªã
        NotificationManager.IMPORTANCE_HIGH
    ).apply {
        description = "K√™nh th√¥ng b√°o chung c·ªßa app"
    }
    notificationManager.createNotificationChannel(defaultChannel)
}
